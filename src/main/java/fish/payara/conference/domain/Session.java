/**
 * This file was generated by the Jeddict
 */
package fish.payara.conference.domain;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import javax.json.bind.annotation.JsonbProperty;
import javax.persistence.Basic;
import javax.persistence.Entity;
import javax.persistence.Enumerated;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.validation.constraints.NotEmpty;

/**
 * @author gaura
 */
@Entity
@Table(name = "CONF_SESSION")
public class Session {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;

    @Basic
    private String title;

    @Basic
    @JsonbProperty("detail")
    @NotEmpty
    private String description;

    @Basic
    @Enumerated
    private SessionType type;

    @Basic
    private LocalDate date;

    @ManyToOne(targetEntity = Location.class)
    private Location location;

    @ManyToMany(targetEntity = Speaker.class)
    @JoinTable(name = "CONF_SESSION_SPEAKER")
    private List<Speaker> speakers;

    public Long getId() {
        return this.id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return this.title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public SessionType getType() {
        return this.type;
    }

    public void setType(SessionType type) {
        this.type = type;
    }

    public LocalDate getDate() {
        return this.date;
    }

    public void setDate(LocalDate date) {
        this.date = date;
    }

    public Location getLocation() {
        return this.location;
    }

    public void setLocation(Location location) {
        this.location = location;
    }

    public List<Speaker> getSpeakers() {
        if (speakers == null) {
            speakers = new ArrayList<>();
        }
        return this.speakers;
    }

    public void setSpeakers(List<Speaker> speakers) {
        this.speakers = speakers;
    }

    public void addSpeaker(Speaker speaker) {
        getSpeakers().add(speaker);
        speaker.getSessions().add(this);
    }

    public void removeSpeaker(Speaker speaker) {
        getSpeakers().remove(speaker);
        speaker.getSessions().remove(this);
    }

}